// # loop-lit/mcmillan2006_true-unreach-call.c.i
// # literal source
  extern void *malloc (unsigned int __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;
  extern void __VERIFIER_error(void);
  extern void __VERIFIER_assume(int);
  void __VERIFIER_assert(int cond) {
    if (!(cond)) {
      ERROR: __VERIFIER_error();
    }
    return;
  }
  extern int __VERIFIER_nondet_int();
  int main() {
    int n = __VERIFIER_nondet_int();
    __VERIFIER_assume(0 <= n && n <= 1000);
    int *x = malloc(n * sizeof(int));
    for (int i = 0; i < n; i++) x[i] = 0;
    for (int i = 0; i < n; i++) __VERIFIER_assert(x[i] == 0);
    return 0;
  }
  Final store:
  { "&i" -> [ r?((&r:0,top)) : "int" ],"valid" -> 1,"&n" -> [ r?((&r:0,top)) : "int" ],"&x" -> [ (&new:0,top) : "int * *" ],"return" -> [ 0 : "int" ],"&new:0" -> { "top" -> [ if ((0 < r?((&r:0,top)))) { collect(r?((&r:0,top))) { x14? =>
          0
      } } else { collect(0) { x14? =>
          <error>
      } } : "int *" ] } }
