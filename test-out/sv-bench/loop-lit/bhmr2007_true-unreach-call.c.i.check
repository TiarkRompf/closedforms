// # loop-lit/bhmr2007_true-unreach-call.c.i
// # literal source
  extern void __VERIFIER_error(void);
  extern void __VERIFIER_assume(int);
  void __VERIFIER_assert(int cond) {
    if (!(cond)) {
      ERROR: __VERIFIER_error();
    }
    return;
  }
  int __VERIFIER_nondet_int();
  int main() {
    int i, n, a, b;
    i = 0; a = 0; b = 0; n = __VERIFIER_nondet_int();
    __VERIFIER_assume(n >= 0 && n <= 1000000);
    while (i < n) {
      if (__VERIFIER_nondet_int()) {
        a = a + 1;
        b = b + 2;
      } else {
        a = a + 2;
        b = b + 1;
      }
      i = i + 1;
    }
    __VERIFIER_assert(a + b == 3*n);
    return 0;
  }
  Final store:
  { "&i" -> [ r?((&r:0,top)) : "int" ],"valid" -> 1,"&a" -> [ sum(r?((&r:0,top))) { x17?x16_&a_$value? => if (r?(("&r:1",("top",x17?x16_&a_$value?)))) { 1 } else { 2 } } : "int" ],"&n" -> [ r?((&r:0,top)) : "int" ],"&b" -> [ sum(r?((&r:0,top))) { x17?x16_&b_$value? => if (r?(("&r:1",("top",x17?x16_&b_$value?)))) { 2 } else { 1 } } : "int" ],"return" -> [ 0 : "int" ] }
