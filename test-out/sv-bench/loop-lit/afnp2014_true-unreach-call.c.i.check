// # loop-lit/afnp2014_true-unreach-call.c.i
// # literal source
  extern void __VERIFIER_error(void);
  extern void __VERIFIER_assume(int);
  void __VERIFIER_assert(int cond) {
    if (!(cond)) {
      ERROR: __VERIFIER_error();
    }
    return;
  }
  int __VERIFIER_nondet_int();
  int main() {
    int x = 1;
    int y = 0;
    while (y < 1000 && __VERIFIER_nondet_int()) {
      x = x + y;
      y = y + 1;
    }
    __VERIFIER_assert(x >= y);
    return 0;
  }
  Final store:
  { "valid" -> 1,"&x" -> [ ((fixindex { x6? => if ((x6? < 1000)) { r?(("&r:0",("top",x6?))) } else { 0 } } * (fixindex { x6? => if ((x6? < 1000)) { r?(("&r:0",("top",x6?))) } else { 0 } } * 0.5)) + ((fixindex { x6? => if ((x6? < 1000)) { r?(("&r:0",("top",x6?))) } else { 0 } } * -0.5) + 1)) : "int" ],"&y" -> [ fixindex { x6? => if ((x6? < 1000)) { r?(("&r:0",("top",x6?))) } else { 0 } } : "int" ],"return" -> [ 0 : "int" ] }
